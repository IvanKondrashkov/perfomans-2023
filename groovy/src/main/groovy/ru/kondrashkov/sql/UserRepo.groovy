package ru.kondrashkov.sql

import groovy.sql.Sql
import ru.kondrashkov.model.User
import ru.kondrashkov.model.UserCredentials

class UserRepo {

    def sql = {
        Properties props = new Properties()
        ClassLoader classLoader = getClass().getClassLoader()
        File file = new File(classLoader.getResource("application.properties").getFile())
        file.withDataInputStream {
            props.load(it)
        }

        final String URL = props."datasource.url"
        final String USER = props."datasource.username"
        final String PASSWORD = props."datasource.password"
        final String DRIVER = props."datasource.driver-class-name"

        return Sql.newInstance(URL, USER, PASSWORD, DRIVER)
    }

    void createTable() {
        sql().execute '''
            CREATE TABLE IF NOT EXISTS users (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY,
            name VARCHAR(100) NOT NULL,
            login VARCHAR(12),
            password VARCHAR(6)
            );
        '''
    }

    User findById(Integer id) {
        def user = sql().firstRow'SELECT * FROM users WHERE id = (?)', [id]

        return new User(user?.id, user?.name, new UserCredentials(user?.login, user?.password))
    }

    List<User> findAll() {
        def users = sql().rows 'SELECT * FROM users'

        if (users) {
            return users.stream()
                    .map {new User(it?.id, it?.name, new UserCredentials(it?.login, it?.password))}
                    .collect()
        }
    }

    User save(User user) {
        def keys = sql().executeInsert 'INSERT INTO users (name) VALUES (?)', [user.name]

        return new User(keys[0][0], keys[0][1])
    }

    User updateById(Integer id, User user) {
        sql().executeUpdate 'UPDATE users SET name=(?), login=(?), password=(?) WHERE id=(?)', [user.name, user.credentials.login, user.credentials.password, id]

        return findById(id)
    }

    void deleteById(Integer id) {
        def user = findById(id)

        if (user) {
            sql().executeUpdate 'DELETE FROM users WHERE id=(?)', [id]
        }
    }

    void dropTable() {
        sql().execute 'DROP TABLE users;'
    }
}